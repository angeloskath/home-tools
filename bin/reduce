#!/usr/bin/env python

import argparse
from statistics import median
import sys


class Reduction:
    def __init__(self):
        self.accumulators = None

    def __call__(self, values):
        self.accumulators = self._update(self.accumulators, values)

    @property
    def value(self):
        return self.accumulators


class NumberFuncReduce(Reduction):
    def __init__(self, func):
        super().__init__()
        self.func = func

    def _update(self, accumulators, values):
        if accumulators is None:
            return tuple(map(float, values))
        return tuple(
            self.func(acc, float(v))
            for acc, v in zip(accumulators, values)
        )


class Sum(NumberFuncReduce):
    def __init__(self):
        super().__init__(lambda x, y: x+y)


class Min(NumberFuncReduce):
    def __init__(self):
        super().__init__(lambda x, y: min(x, y))


class Max(NumberFuncReduce):
    def __init__(self):
        super().__init__(lambda x, y: max(x, y))


class Count(NumberFuncReduce):
    def __init__(self):
        super().__init__(lambda x, y: x+1)

    def _update(self, accumulators, values):
        if accumulators is None:
            accumulators = tuple([0]*len(values))
        return super()._update(accumulators, values)


class Avg(Reduction):
    def __init__(self):
        super().__init__()
        self.sum = Sum()
        self.cnt = Count()

    def _update(self, accumulators, values):
        self.sum(values)
        self.cnt(values)

    @property
    def value(self):
        return tuple(x/y for x, y in zip(self.sum.value, self.cnt.value))


class Median(Reduction):
    def __init__(self):
        super().__init__()

    def _update(self, accumulators, values):
        if accumulators is None:
            accumulators = tuple([] for _ in range(len(values)))
        for acc, val in zip(accumulators, values):
            acc.append(val)
        return accumulators

    @property
    def value(self):
        return tuple(median(v) for v in self.accumulators)


def main(argv):
    parser = argparse.ArgumentParser(
        description="Perform columnwise reduction operations"
    )
    parser.add_argument(
        "op",
        choices=["sum", "avg", "min", "max", "cnt", "median"],
        nargs="+",
        help="The operations that we need to perform"
    )
    parser.add_argument(
        "--delimiter", "-d",
        default=" ",
        help="Define the field delimiter"
    )
    args = parser.parse_args(argv)

    operations = {
        "sum": Sum(),
        "avg": Avg(),
        "min": Min(),
        "max": Max(),
        "cnt": Count(),
        "median": Median()
    }
    ops = list(map(lambda x: operations[x], args.op))

    try:
        while True:
            line = sys.stdin.readline()
            if line == "":
                break

            line = line.strip().split(args.delimiter)
            [op(line) for op in ops]

        print(*sum(map(list, zip(*[op.value for op in ops])), []))

    except IOError as e:
        if e.errno != errno.EPIPE:
            raise


if __name__ == "__main__":
    main(sys.argv[1:])
