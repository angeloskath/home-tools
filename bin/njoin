#!/usr/bin/env python

import argparse
import errno
from functools import wraps
from itertools import izip
from time import sleep
import sys


def transpose2d(v):
    if len(v) == 0:
        return v

    return [
        [v[i][j] for i in range(len(v))]
        for j in range(len(v[0]))
    ]


def stddev(x):
    mu = sum(x) / len(x)
    var = sum((xi-mu)**2 for xi in x)
    return var**0.5


def with_values_as(vtype):
    def deco(f):
        @wraps(f)
        def inner(lines, args):
            try:
                v = [map(vtype, l.split(args.delimiter)) for l in lines]
                return f(v, args)
            except ValueError:
                return lines[0].strip()
        return inner
    return deco


def transposed(f):
    @wraps(f)
    def inner(v, args):
        return f(transpose2d(v), args)
    return inner


def concat(lines, args):
    return args.delimiter.join([
        x.strip() for x in lines
    ])


@with_values_as(float)
@transposed
def avg(values, args):
    return args.delimiter.join([
        str(sum(v) / len(v))
        for v in values
    ])


@with_values_as(float)
@transposed
def std(values, args):
    return args.delimiter.join([
        str(stddev(v)) for v in values
    ])


def line_generator(f, follow=False):
    while True:
        l = f.readline()
        if l == "":
            if follow:
                sleep(1)
                f.seek(0, 1)
            else:
                break
        else:
            yield l


def to_file(path):
    if path == "-":
        return sys.stdin
    else:
        return open(path)


def main(argv):
    parser = argparse.ArgumentParser(
        description="Merge many files by joining their lines"
    )

    parser.add_argument(
        "file",
        nargs="+",
        help="The files to merge (use - for stdin)"
    )
    parser.add_argument(
        "--follow", "-f",
        action="store_true",
        help="Emulate the behaviour of 'tail -f'"
    )
    parser.add_argument(
        "--no_flush",
        action="store_false",
        dest="flush",
        help="Do not flush the stdout after every line"
    )
    parser.add_argument(
        "--delimiter", "-d",
        default=" ",
        help="Choose the delimiter that will be joining the lines of the files"
    )
    parser.add_argument(
        "--avg",
        dest="function",
        action="store_const",
        default=concat,
        const=avg
    )
    parser.add_argument(
        "--std",
        dest="function",
        action="store_const",
        default=concat,
        const=std
    )

    args = parser.parse_args(argv)

    descriptors = []
    try:
        descriptors = [to_file(path) for path in args.file]
        generators = [line_generator(f, args.follow) for f in descriptors]
        for lines in izip(*generators):
            print args.function(lines, args)
            if args.flush:
                sys.stdout.flush()
    except IOError as e:
        if e.errno == errno.EPIPE:
            pass
        else:
            raise
    except KeyboardInterrupt:
        pass
    finally:
        for f in descriptors:
            f.close()


if __name__ == "__main__":
    main(sys.argv[1:])
