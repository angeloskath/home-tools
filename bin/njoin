#!/usr/bin/env python

from __future__ import print_function

import argparse
import errno
from functools import wraps
try:
    from itertools import izip, izip_longest
except ImportError:
    from itertools import zip_longest as izip_longest
    izip = zip
import re
import sys
from time import sleep


def with_kw(f):
    @wraps(f)
    def inner(*args, **kwargs):
        return f(*args)
    return inner


def filter(filter_string):
    if filter_string is None:
        return lambda x: True

    return lambda x: re.search(filter_string, x) is not None


def concat(lines, args):
    return args.delimiter.join([
        x.strip() for x in lines
    ])


def line_generator(f, filter=lambda x: True, follow=False):
    while True:
        l = f.readline()
        if l == "":
            if follow:
                sleep(1)
                f.seek(0, 1)
            else:
                break
        else:
            if filter(l):
                yield l


def to_file(path):
    if path == "-":
        return sys.stdin
    else:
        return open(path)


def main(argv):
    parser = argparse.ArgumentParser(
        description="Merge many files by joining their lines"
    )

    parser.add_argument(
        "file",
        nargs="+",
        help="The files to merge (use - for stdin)"
    )
    parser.add_argument(
        "--follow", "-f",
        action="store_true",
        help="Emulate the behaviour of 'tail -f'"
    )
    parser.add_argument(
        "--no_flush",
        action="store_false",
        dest="flush",
        help="Do not flush the stdout after every line"
    )
    parser.add_argument(
        "--delimiter", "-d",
        default=" ",
        help="Choose the delimiter that will be joining the lines of the files"
    )
    parser.add_argument(
        "--fill",
        help="Fill empty lines with this value"
    )
    parser.add_argument(
        "--filter",
        help="Accept only lines that pass the filter"
    )

    args = parser.parse_args(argv)

    zipper = with_kw(izip) if args.fill is None else izip_longest

    descriptors = []
    try:
        descriptors = [to_file(path) for path in args.file]
        generators = [
            line_generator(f, filter(args.filter), args.follow)
            for f in descriptors
        ]
        for lines in zipper(*generators, fillvalue=args.fill):
            print(concat(lines, args))
            if args.flush:
                sys.stdout.flush()
    except IOError as e:
        if e.errno == errno.EPIPE:
            pass
        else:
            raise
    except KeyboardInterrupt:
        pass
    finally:
        for f in descriptors:
            f.close()


if __name__ == "__main__":
    main(sys.argv[1:])
