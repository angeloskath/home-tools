#!/usr/bin/env python

import argparse
from collections import deque, namedtuple
import sys

from matplotlib import animation
from matplotlib import pyplot as plt
from matplotlib.animation import FuncAnimation
from skimage.io import imread
from skimage.util import img_as_float


Image = namedtuple("Image", ("filepath", "data"))


class ImageList(object):
    def __init__(self, filenames):
        self._filenames = filenames
        self._cache = deque([], 5)

    def __len__(self):
        return len(self._filenames)

    def __getitem__(self, i):
        # Return it if it is in the cache
        for item in self._cache:
            if item[0] == i:
                return item[1]

        # Read it and add it in the cache
        item = (
            i,
            Image(self._filenames[i], img_as_float(imread(self._filenames[i])))
        )
        self._cache.append(item)

        return item[1]


def update(img, img_plot, title, args):
    if args.show_files:
        title.set_text(img.filepath)
    img_plot.set_array(img.data)

    return img_plot, title


def main(argv=None):
    parser = argparse.ArgumentParser(
        description="Animate a list of images read from stdin"
    )
    parser.add_argument(
        "--size",
        type=lambda x: tuple(map(int, x.split("x"))),
        default="6x4",
        help="Set the size of the figure in inches"
    )
    parser.add_argument(
        "--delay", "-d",
        type=int,
        default=200,
        help="Delay between frames in milliseconds"
    )
    parser.add_argument(
        "--save", "-s",
        help="Save the animation in a video file"
    )
    parser.add_argument(
        "--no_axis",
        dest="axis",
        action="store_false",
        help="Hide the axis"
    )
    parser.add_argument(
        "--show_files",
        action="store_true",
        help="Show the filenames as title"
    )
    parser.add_argument(
        "--vmin",
        type=float,
        default=0,
        help="Set the minimum of the heatmap range"
    )
    parser.add_argument(
        "--vmax",
        type=float,
        default=1,
        help="Set the maximum of the heatmap range"
    )

    args = parser.parse_args()

    images = ImageList([l.strip() for l in sys.stdin])
    figure, axis = plt.subplots(figsize=args.size)
    img_plot = axis.imshow(images[0].data, vmin=args.vmin, vmax=args.vmax,
                           animated=True)
    title = axis.text(0, 0, "", ha="left", va="top", color="white")
    if not args.axis:
        axis.axis("off")
    img_animation = FuncAnimation(
        figure,
        update,
        fargs=(img_plot, title, args),
        frames=images,
        interval=args.delay,
        repeat=False,
        save_count=2,
        blit=False
    )

    if args.save:
        writer = animation.writers["ffmpeg"](
            fps=int(round(1000./args.delay)),
            bitrate=1800,
            metadata=dict(artist="Home-tools 'movie'")
        )
        img_animation.save(args.save, writer=writer)
    plt.show()


if __name__ == "__main__":
    main()
