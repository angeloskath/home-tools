#!/usr/bin/env python

import argparse
import errno
from itertools import groupby
from math import sqrt
import sys


def _groupby_key(N):
    cnt = [-1]
    def inner(*args, **kwargs):
        cnt[0] += 1
        return cnt[0] / N
    return inner


def _groupby(x, N, continuous):
    if N is None:
        N = 2**32 if continuous else 1
    if continuous:
        for k, g in groupby(x, _groupby_key(N)):
            yield k, list(g)
    else:
        for k in range(min(N, len(x))):
            yield k, [x[j] for j in range(k, len(x), N)]

def _sum(k, x):
    x = list(map(float, x))
    return sum(x)


def avg(k, x):
    x = list(map(float, x))
    return sum(x) / len(x)


def var(k, x):
    x = list(map(float, x))
    mu = sum(x) / len(x)

    return sum((xi-mu)**2 for xi in x) / len(x)


def std(k, x):
    return sqrt(var(k, x))


def _min(k, x):
    return min(map(float, x))


def _max(k, x):
    return max(map(float, x))


def main(argv):
    parser = argparse.ArgumentParser(
        description="Perform rowwise operations"
    )
    parser.add_argument(
        "op",
        choices=["sum", "avg", "var", "std", "min", "max"],
        nargs="+",
        help="The operations that we need to perform"
    )

    parser.add_argument(
        "--groupby", "-g",
        type=int,
        help="Group every GROUPBY fields and perform each operation on those",
        default=None
    )
    parser.add_argument(
        "--continuous_group",
        action="store_true",
        help=("Assume that the group is continuous (the first N then the "
              "second N etc) otherwise the group is every N (the first and "
              "then the Nth etc)")
    )
    parser.add_argument(
        "--delimiter", "-d",
        default=" ",
        help="Define the field delimiter"
    )
    parser.add_argument(
        "--no_flush",
        dest="flush",
        action="store_false",
        help="Do not flush after every write"
    )

    args = parser.parse_args(argv)

    operations = {
        "sum": _sum,
        "avg": avg,
        "var": var,
        "std": std,
        "min": _min,
        "max": _max
    }
    ops = list(map(lambda x: operations[x], args.op))

    try:
        while True:
            line = sys.stdin.readline()
            if line == "":
                break

            line = line.strip().split(args.delimiter)
            try:
                print(args.delimiter.join([
                    str(op(*g))
                    for g in _groupby(line, args.groupby, args.continuous_group)
                    for op in ops
                ]))
            except ValueError:
                print(args.delimiter.join(line))
            if args.flush:
                sys.stdout.flush()
    except IOError as e:
        if e.errno != errno.EPIPE:
            raise


if __name__ == "__main__":
    main(sys.argv[1:])
