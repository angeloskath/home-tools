#!/usr/bin/env python

import argparse
import errno
import sys

try:
    import numpy as np
except ImportError:
    np = None
    sys.stderr.write("Numpy not available\n")


def try_or_none(f):
    try:
        return f()
    except:
        return None


def _lines(stream):
    l = stream.readline()
    while l != "":
        yield l
        l = stream.readline()


def main(argv):
    parser = argparse.ArgumentParser(
        description="Run custom python code for every line in a file"
    )

    parser.add_argument(
        "code",
        help="The code to run"
    )
    parser.add_argument(
        "--debug",
        action="store_true",
        help="Show the error instead of printing the full line"
    )
    parser.add_argument(
        "--delimiter",
        help="The delimiter for outputing lists of things",
        default=" "
    )
    parser.add_argument(
        "--end",
        default="\n",
        help="What to print after each line"
    )

    args = parser.parse_args(argv)

    try:
        result = None
        for i, l in enumerate(_lines(sys.stdin)):
            try:
                local_vars = {
                    "np": np,
                    "lineno": i,
                    "line": tuple(l[:-1]),
                    "i": i,
                    "l": tuple(l[:-1]),
                    "fields": try_or_none(lambda: l.split()),
                    "xs": try_or_none(lambda: tuple(map(float, l.split()))),
                    "agg": result
                }
                result = eval(args.code, local_vars, {})
                if not isinstance(result, (list, tuple)):
                    result = [result]
                print(args.delimiter.join(map(str, result)), end=args.end)
            except:
                if args.debug:
                    raise
                else:
                    sys.stdout.write(l)
            sys.stdout.flush()
    except IOError as e:
        if e.errno != errno.EPIPE:
            raise


if __name__ == "__main__":
    main(sys.argv[1:])
